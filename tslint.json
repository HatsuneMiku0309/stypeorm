{
    "defaultSeverity": "error",
    "extends": [
        "tslint:recommended"
    ],
    "linterOptions": {
        "exclude": [
            "**/*.d.ts",
            "**/*.interface.ts",
            "node_modules/**/*",
            "dist/**/*",
            "tslint-rules/**/*",
            "src/**/tests/**/*"
        ],
        "format": "codeFrame"
    },
    "jsRules": {},
    "rules": {
        "ban": [
            true,
            "eval"
        ],
        // Requires the specified tokens to be on the same line as the expression preceding them.
        // Five arguments may be optionally provided:
        //      "check-catch" checks that catch is on the same line as the closing brace for try.
        //      "check-finally" checks that finally is on the same line as the closing brace for catch.
        //      "check-else" checks that else is on the same line as the closing brace for if.
        //      "check-open-brace" checks that an open brace falls on the same line as its preceding expression.
        //      "check-whitespace" checks preceding whitespace for the specified tokens.
        "one-line": [true, "check-catch", "check-finally", "check-else", "check-open-brace", "check-whitespace"],

        "ban-comma-operator": false, // Disallows the comma operator to be used.
        "curly": false, // Enforces braces for if/for/do/while statements.
        "forin": false, // Requires a for ... in statement to be filtered with an if statement.
        "function-constructor": true, // Prevents using the built-in Function constructor. Pass: let doesNothing = () => {}; let addNumbers = (a, b) => a + b; Fail: let doesNothing = new Function(); let addNumbers = new Function("a", "b", "return a + b");
        "import-blacklist": [true], // Disallows importing the specified modules via import and require, or importing specific named exports of the specified modules. "import-blacklist": [true, "lodash", {"lodash": ["pull", "pullAll"]}]
        "label-position": true, // Only allows labels in sensible locations. This rule only allows labels to be on do/for/while/switch statements. [break, continue, ...]
        "no-arg": true, // Disallows use of arguments.callee. Rationale: Using arguments.callee makes various performance optimizations impossible
        "no-bitwise": true, // Disallows bitwise operators. Specifically, the following bitwise operators are banned: &, &=, |, |=, ^, ^=, <<, <<=, >>, >>=, >>>, >>>=, and ~. This rule does not ban the use of & and | for intersection and union types.
        "no-conditional-assignment": true, // Disallows any type of assignment in conditionals. This applies to do-while, for, if, and while statements and conditional (ternary) expressions.
        "no-console": [false, "dir", "log", "warn"], // Bans the use of specified console methods.
        "no-construct": true, // Disallows access to the constructors of String, Number, and Boolean.
        "no-debugger": false, // Disallows debugger statements.
        "no-duplicate-super": true, // Warns if ‘super()’ appears twice in a constructor.
        "no-duplicate-switch-case": true, // Prevents duplicate cases in switch statements.

        // Disallows duplicate variable declarations in the same block scope. This rule is only useful when using the var keyword - the compiler will detect redeclarations of let and const variables. You can specify "check-parameters" to check for variables with the same name as a parameter.
        // @因為禁用了var，這個已經沒啥用了。
        "no-duplicate-variable": [true, "check-parameters"], 

        // Bans usage of the delete operator with computed key expressions. (可考慮刪除)
        "no-dynamic-delete": false, 
        
        // Disallows empty blocks. Blocks with a comment inside are not considered empty. 
        // If allow-empty-catch is specified, then catch blocks are allowed to be empty. If allow-empty-functions is specified, then function definitions are allowed to be empty.
        "no-empty": false,
        // "no-empty": [true, "allow-empty-catch", "allow-empty-functions"],
        
        "no-eval": true, // Disallows eval function invocations.
        // "no-floating-promises": true, // !!Requires Type Info

        // Disallows importing modules that are not listed as dependency in the project’s package.json. Disallows importing transient dependencies and modules installed above your package’s root directory.
        // "no-implicit-dependencies": [true, "dev", [ "uuid", "dayjs" ]],
        "no-implicit-dependencies": false,
        // By default the rule looks at "dependencies" and "peerDependencies". By adding the "dev" option the rule also looks at "devDependencies". By adding the "optional" option the rule also looks at "optionalDependencies". An array of whitelisted modules can be added to skip checking their existence in package.json.
        // "no-implicit-dependencies": [true, ["src", "app"]], 
        
        "no-invalid-template-strings": true, // Warns on use of ${ in non-template strings.
        
        // Disallows using the this keyword outside of classes.
        "no-invalid-this": true,
        // "no-invalid-this": [true, "check-function-in-method"], // check-function-in-method disallows using the this keyword in functions within class methods.
        // "no-null-keyword": true // Disallows use of the null keyword literal. (這個應該還是有用，考慮開啟。)
        
        // Forbids an object literal to appear in a type assertion expression. Casting to any or to unknown is still allowed. (考慮開啟。)
        "no-object-literal-type-assertion": false,
        "no-return-await": false, // Disallows unnecessary return await.
        "one-variable-per-declaration": [true, "ignore-for-loop"], // Disallows multiple variable definitions in the same declaration statement. ignore-for-loop allows multiple variable definitions in a for loop declaration.
        "quotemark": [true, "single", "avoid-escape", "avoid-template"], // Enforces quote character for string literals. 
        "whitespace": [
            true, 
            "check-branch", // checks branching statements (if/else/for/while) are followed by whitespace.
            "check-decl", // checks that variable declarations have whitespace around the equals token.
            "check-operator", // checks for whitespace around operator tokens.
            "check-module", // checks for whitespace in import & export statements.
            "check-separator", // checks for whitespace after separator tokens (,/;).
            "check-rest-spread", // checks that there is no whitespace after rest/spread operator (...).
            "check-type", // checks for whitespace before a variable type specification.
            "check-typecast", // checks for whitespace between a typecast and its target.
            "check-type-operator", // checks for whitespace between type operators | and &.
            "check-preblock", // checks for whitespace before the opening brace of a block.
            "check-postbrace" // checks for whitespace after an opening brace. if () {[whitespace] }
        ], // Enforces whitespace style conventions.
        "eofline": true, // Ensures the file ends with a newline. Fix for single-line files is not supported.
        
        // Enforces consistent semicolon usage at the end of every statement.
        // One of the following arguments must be provided:
        //      "always" enforces semicolons at the end of every statement.
        //      "never" disallows semicolons at the end of every statement except for when they are necessary.
        // The following arguments may be optionally provided:
        //      "ignore-interfaces" skips checking semicolons at the end of interface members.
        //      "ignore-bound-class-methods" skips checking semicolons at the end of bound class methods.
        //      "strict-bound-class-methods" disables any special handling of bound class methods and treats them as any other assignment. This option overrides "ignore-bound-class-methods".
        "semicolon": [true, "always", "ignore-interfaces"],
        "no-consecutive-blank-lines": [true, 4], // Disallows one or more blank lines in a row. An optional number of maximum allowed sequential blanks can be specified. If no value is provided, a default of 1 will be used.
        "class-name": true, // Enforces PascalCased class and interface names.

        // Require or disallow a space before function parenthesis
        // One argument which is an object which may contain the keys anonymous, named, and asyncArrow These should be set to either "always" or "never".
        //      "anonymous" checks before the opening paren in anonymous functions
        //      "named" checks before the opening paren in named functions
        //      "asyncArrow" checks before the opening paren in async arrow functions
        //      "method" checks before the opening paren in class methods
        //      "constructor" checks before the opening paren in class constructors
        "space-before-function-paren": [true, {
            "anonymous": "always", 
            "named": "always", 
            "asyncArrow": "always", 
            "method": "never",
            "constructor": "never"
        }],

        // Requires or disallows trailing commas in array and object literals, destructuring assignments, function typings, named imports and exports and function parameters.
        // One argument which is an object with the keys multiline and singleline. Both can be set to a string ("always" or "never") or an object.
        // The object can contain any of the following keys: "arrays", "objects", "functions", "imports", "exports", and "typeLiterals"; each key can have one of the following values: "always", "never", and "ignore". Any missing keys will default to "ignore".
        //      "multiline" checks multi-line object literals.
        //      "singleline" checks single-line object literals.
        "trailing-comma": [true, {"multiline": "never", "singleline": "never"}],
        // "trailing-comma": [
        //     true,
        //     {
        //       "multiline": {
        //         "objects": "always",
        //         "arrays": "always",
        //         "functions": "never",
        //         "typeLiterals": "ignore"
        //       },
        //       "esSpecCompliant": true
        //     }
        //   ]
        
        
        // Checks variable names for various errors.
        // Five arguments may be optionally provided:
        //  "check-format": allows only lowerCamelCased or UPPER_CASED variable names
        //      "allow-leading-underscore" allows underscores at the beginning (only has an effect if “check-format” specified)
        //      "allow-trailing-underscore" allows underscores at the end. (only has an effect if “check-format” specified)
        //      "allow-pascal-case" allows PascalCase in addition to lowerCamelCase.
        //      "allow-snake-case" allows snake_case in addition to lowerCamelCase.
        //  "ban-keywords": disallows the use of certain TypeScript keywords as variable or parameter names.
        //      These are: any, Number, number, String, string, Boolean, boolean, Undefined, undefined
        "variable-name": [true, "ban-keywords", "check-format", "allow-leading-underscore", "allow-snake-case", "allow-pascal-case"],

        // Requires explicit visibility declarations for class members.
        // These arguments may be optionally provided:
        //      "no-public" forbids public accessibility to be specified, because this is the default.
        //      "check-accessor" enforces explicit visibility on get/set accessors
        //      "check-constructor" enforces explicit visibility on constructors
        //      "check-parameter-property" enforces explicit visibility on parameter properties
        "member-access": [
            true,
            "no-public"
        ],

        // Disallows the use of require statements except in import statements.
        // In other words, the use of forms such as var module = require("module") are banned. Instead use ES2015-style imports or import foo = require('foo') imports.
        "no-var-requires": false,

        // Requires or disallows whitespace for type definitions. Determines if a space is required or not before the colon in a type specifier.
        // Two arguments which are both objects. The first argument specifies how much space should be to the left of a typedef colon. The second argument specifies how much space should be to the right of a typedef colon. Each key should have a value of "onespace", "space" or "nospace". Possible keys are:
        //      "call-signature" checks return type of functions.
        //      "index-signature" checks index type specifier of indexers.
        //      "parameter" checks function parameters.
        //      "property-declaration" checks object property declarations.
        //      "variable-declaration" checks variable declaration.
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            },
            {
                "call-signature": "onespace",
                "index-signature": "onespace",
                "parameter": "onespace",
                "property-declaration": "onespace",
                "variable-declaration": "onespace"
            }
        ],
 
        // Forbids array literals to contain missing elements.
        // Missing elements are probably an accidentally duplicated comma.
        "no-sparse-arrays": true,

        // Forbids unnecessary string literal property access. Allows obj["prop-erty"] (can’t be a regular property access). Disallows obj["property"] (should be obj.property).
        "no-string-literal": true,

        // Enforces consistent object literal property quote style.
        // Possible settings are:
        //      "always": Property names should always be quoted. (This is the default.)
        //      "as-needed": Only property names which require quotes may be quoted (e.g. those with spaces in them).
        //      "consistent": Property names should either all be quoted or unquoted.
        //      "consistent-as-needed": If any property name requires quotes, then all properties must be quoted. Otherwise, no property names may be quoted.
        // For ES6, computed property names ({[name]: value}) and methods ({foo() {}}) never need to be quoted.
        "object-literal-key-quotes": [true, "as-needed"],

        // Flags throwing plain strings or concatenations of strings.
        "no-string-throw": true,

        // Disallows traditional (non-arrow) function expressions. Note that non-arrow functions are allowed if ‘this’ appears somewhere in its body (as such functions cannot be converted to arrow functions).
        // Two arguments may be optionally provided:
        //      "allow-declarations" allows standalone function declarations.
        //      "allow-named-functions" allows the expression function foo() {} but not function() {}.
        "only-arrow-functions": [true, "allow-declarations", "allow-named-functions"],

        // Disallows importing any submodule.
        // 看不出所以然...
        "no-submodule-imports": false,

        // Requires that import statements be alphabetized and grouped.
        // @對import做排序，麻煩...
        "ordered-imports": false,

        // Disallows falling through case statements.
        // example: 
        //      switch(foo) {
        //          case 1:
        //              someFunc(foo);
        //              /* falls through */
        //          case 2:
        //              someOtherFunc(foo);
        //              /* falls through */
        //          case 3:
        //              someOtherFunc2(foo);
        // }
        "no-switch-case-fall-through": true,
        
        // Disallows unnecessary references to this.
        // Two options may be provided on an object:
        //      allow-destructuring allows using destructuring to access members of this (e.g. { foo, bar } = this;).
        //      allowed-names may be specified as a list of regular expressions to match allowed variable names.
        // @自定義，允許this轉為self and that
        "no-this-assignment": [true, {"allowed-names": ["^self|that$"], "allow-destructuring": true}],

        // A file may not contain more than the specified number of classes
        "max-classes-per-file": [ true, 10 ],
       
        // Warns when a method is used outside of a method call.
        // @npm run lint 時才會顯示錯誤。
        "no-unbound-method": [true, "ignore-static"],

        // Disallows classes that are not strictly necessary.
        // Three arguments may be optionally provided:
        //      "allow-constructor-only" ignores classes whose members are constructors.
        //      "allow-empty-class" ignores class DemoClass {}.
        //      "allow-static-only" ignores classes whose members are static. (all static class ...?)
        "no-unnecessary-class": [true, "allow-empty-class", "allow-constructor-only", "allow-static-only"],

        // Warns when using an expression of type ‘any’ in a dynamic way. Uses are only allowed if they would work for {} | null | undefined. Type casts and tests are allowed. Expressions that work on all values (such as "" + x) are allowed.
        // @可能造成不方便，不太會使用<T>，先暫時關閉。
        "no-unsafe-any": false,

        // Disallows control flow statements, such as return, continue, break and throws in finally blocks.
        // @在 finally 不應該出現上述 syntax ，這很奇怪。
        "no-unsafe-finally": true,

        // Disallows unused expression statements. Unused expressions are expression statements which are not assignments or function calls (and thus usually no-ops).
        // Three arguments may be optionally provided:
        //      allow-fast-null-checks allows to use logical operators to perform fast null checks and perform method or function calls for side effects (e.g. e && e.preventDefault()).
        //      allow-new allows ‘new’ expressions for side effects (e.g. new ModifyGlobalState();.
        //      allow-tagged-template allows tagged templates for side effects (e.g. this.add\foo`;`.
        // @只有 allow-fast-null-checks 實用。
        "no-unused-expression": [true, "allow-fast-null-checks"],

        // Disallows unused imports, variables, functions and private class members. Similar to tsc’s –noUnusedParameters and –noUnusedLocals options, but does not interrupt code compilation.
        // 這個可以自動修復，但算了。 In addition to avoiding compilation errors, this rule may still be useful if you wish to have tslint automatically remove unused imports, variables, functions, and private class members, when using TSLint’s --fix option.
        // Three optional arguments may be optionally provided:
        //      "check-parameters" disallows unused function and constructor parameters.
        //          NOTE: this option is experimental and does not work with classes that use abstract method declarations, among other things.
        //      {"ignore-pattern": "pattern"} where pattern is a case-sensitive regexp. Variable names and imports that match the pattern will be ignored.
        // @沒有使用的變數或方法存在也無所謂的樣子。
        // "no-unused-variable": [true, {"ignore-pattern": "^_"}],
        "no-unused-variable": false,

        // Disallows usage of the var keyword.
        // Use let or const instead.
        "no-var-keyword": true,

        // Disallows usage of variables before their declaration.
        // This rule is primarily useful when using the var keyword since the compiler will automatically detect if a block-scoped let and const variable is used before declaration. Since most modern TypeScript doesn’t use var, this rule is generally discouraged and is kept around for legacy purposes. It is slow to compute, is not enabled in the built-in configuration presets, and should not be used to inform TSLint design decisions.
        // @因為已經禁用var了，所以就算關閉也沒啥問題。
        // Waring: no-use-before-declare is deprecated. Since TypeScript 2.9. Please use the built-in compiler checks instead.
        "no-use-before-declare": false,

        // Requires expressions of type void to appear in statement position.
        // @禁用void作為回傳，先暫時關閉。
        "no-void-expression": false,

        // Requires the radix parameter to be specified when calling parseInt.
        // @不是必要的，如果不填寫則為10進制。
        "radix": false,

        // When adding two variables, operands must both be of type number or of type string.
        // @只允許兩者都是number or string to plus
        "restrict-plus-operands": true,

        // Forbids empty interfaces.
        "no-empty-interface": false,

        // Requires using either ‘T[]’ or ‘Array' for arrays.
        // One of the following arguments must be provided:
        //      "array" enforces use of T[] for all types T.
        //      "generic" enforces use of Array<T> for all types T.
        //      "array-simple" enforces use of T[] if T is a simple type (primitive or type reference).
        // @這個可以關閉，這個影響不大，依據喜好自己定義。
        "array-type": [true, "array"],

        // Enforces vertical alignment.
        // Five arguments may be optionally provided:
        //      "parameters" checks alignment of function parameters.
        //      "arguments" checks alignment of function call arguments.
        //      "statements" checks alignment of statements.
        //      "members" checks alignment of members of classes, interfaces, type literal, object literals and object destructuring.
        //      "elements" checks alignment of elements of array literals, array destructuring and tuple types.
        "align": [true, "parameters", "statements", "members", "elements"],

        // Warns for type predicates that are always true or always false. Works for ‘typeof’ comparisons to constants (e.g. ‘typeof foo === “string”’), and equality comparison to ‘null’/’undefined’. (TypeScript won’t let you compare ‘1 === 2’, but it has an exception for ‘1 === undefined’.) Does not yet work for ‘instanceof’. Does not warn for ‘if (x.y)’ where ‘x.y’ is always truthy. For that, see strict-boolean-expressions.
        // This rule requires strictNullChecks to work properly.
        "strict-type-predicates": false, // 在重構之前先關閉。

        // Restricts the types allowed in boolean expressions. By default only booleans are allowed.
        // These options may be provided:
        //      allow-null-union allows union types containing null.
        //          It does not allow null itself.
        //          Without the ‘–strictNullChecks’ compiler option, this will allow anything other than a string, number, or enum.
        //      allow-undefined-union allows union types containing undefined.
        //          It does not allow undefined itself.
        //          Without the ‘–strictNullChecks’ compiler option, this will allow anything other than a string, number, or enum.
        //      allow-string allows strings.
        //          It does not allow unions containing string.
        //          It does not allow string literal types.
        //      allow-enum allows enums.
        //          It does not allow unions containing enum.
        //      allow-number allows numbers.
        //          It does not allow unions containing number.
        //          It does not allow enums or number literal types.
        //      allow-mix allows multiple of the above to appear together.
        //          For example, string | number or RegExp | null | undefined would normally not be allowed.
        //          A type like "foo" | "bar" | undefined is always allowed, because it has only one way to be false.
        //      allow-boolean-or-undefined allows boolean | undefined.
        //          Also allows true | false | undefined.
        //          Does not allow false | undefined.
        //          This option is a subset of allow-undefined-union, so you don’t need to enable both options at the same time.
        // @強制判斷式要為boolean類型，可允許某些類型可直接作為判斷（交給js轉換。）
        // @但是強型別的語言，例： C#, Java都不允許這類判斷，必須轉為boolean，不開任何例外。
        "strict-boolean-expressions": false, // 在重構之前先關閉。
        // "strict-boolean-expressions": [
        //     true,
        //     "allow-null-union",
        //     "allow-undefined-union",
        //     "allow-string",
        //     "allow-enum",
        //     "allow-number"
        //   ]

        // Enforces the use of the ES2018 object spread operator over Object.assign() where appropriate.
        // example: let obj2 = { ...obj }; // 直接解構clone到新的obj2。
        // @因為沒有deepclone，還是需要_.cloneDeep。
        "prefer-object-spread": true,

        // Suggests to convert () => { return x; } to () => x.
        // @不喜歡被強制這個，如果要debug很麻煩...
        "arrow-return-shorthand": false,

        // Disallows trailing whitespace at the end of a line.
        // Possible settings are:
        //      "ignore-template-strings": Allows trailing whitespace in template strings. // 這個不知道有啥用耶
        //      "ignore-comments": Allows trailing whitespace in comments.
        //      "ignore-jsdoc": Allows trailing whitespace only in JSDoc comments.
        //      "ignore-blank-lines": Allows trailing whitespace on empty lines.
        "no-trailing-whitespace": [true, "ignore-comments", "ignore-jsdoc"],

        // Enforces indentation with tabs or spaces.
        // One of the following arguments must be provided:
        //      spaces enforces consistent spaces.
        //      tabs enforces consistent tabs.
        //  A second optional argument specifies indentation size:
        //      2 enforces 2 space indentation.
        //      4 enforces 4 space indentation.
        // Indentation size is required for auto-fixing, but not for rule checking.
        // NOTE: auto-fixing will only convert invalid indent whitespace to the desired type, it will not fix invalid whitespace sizes.
        "indent": [true, "spaces", 4],

        // Requires parentheses around the parameters of arrow function definitions.
        // If ban-single-arg-parens is specified, then arrow functions with one parameter must not have parentheses if removing them is allowed by TypeScript.
        // @這個不知道有啥用...
        "arrow-parens": [true],

        // Requires interface names to begin with a capital ‘I’
        // One of the following two options must be provided:
        //      "always-prefix" requires interface names to start with an “I”
        //      "never-prefix" requires interface names to not have an “I” prefix
        "interface-name": [true, "always-prefix"],
        // "interface-over-type-literal": true,

        // Requires lines to be under a certain max length.
        // It can take one argument, which can be any of the following:
        //      integer indicating maximum length of lines.
        //      object with keys:
        //          limit - number greater than 0 defining the max line length
        //          ignore-pattern - string defining ignore pattern for this rule, being parsed by new RegExp(). For example:
        //              // pattern will ignore all in-line comments.
        //              ^import pattern will ignore all import statements.
        //              ^export {(.*?)} pattern will ignore all multiple export statements.
        //              class [a-zA-Z]+ implements pattern will ignore all class declarations implementing interfaces.
        //              ^import |^export {(.*?)}|class [a-zA-Z]+ implements |// pattern will ignore all the cases listed above.
        "max-line-length": [true, {"limit": 120, "ignore-pattern": "^import |^export {(.*?)}|class [a-zA-Z]+ implements |//|^*"}],
        // "max-line-length": false,

        // Requires the use of as Type for type assertions instead of <Type>.
        "no-angle-bracket-type-assertion": false,

        // Disallows multiple import statements from the same module.
        "no-duplicate-imports": true,

        // Disallows reassigning parameters.
        // @在coding的時候會很麻煩...
        "no-parameter-reassignment": false,

        // Disallows /// <reference path=> imports (use ES6-style imports instead).
        "no-reference": true,

        // Disallows shadowing variable declarations.
        // You can optionally pass an object to disable checking for certain kinds of declarations. Possible keys are "class", "enum", "function", "import", "interface", "namespace", "typeAlias" and "typeParameter". Just set the value to false for the check you want to disable. All checks default to true, i.e. are enabled by default. Note that you cannot disable variables and parameters.
        // The option "temporalDeadZone" defaults to true which shows errors when shadowing block scoped declarations in their temporal dead zone. When set to false parameters, classes, enums and variables declared with let or const are not considered shadowed if the shadowing occurs within their temporal dead zone.
        // The following example shows how the "temporalDeadZone" option changes the linting result:
        "no-shadowed-variable": [
            true,
            {
              "class": true,
              "enum": true,
              "function": true,
              "interface": false,
              "namespace": true,
              "typeAlias": false,
              "typeParameter": false,
              "temporalDeadZone": false // 這個很重要，關掉！！不然會麻煩的要死。
            }
        ],

        // Enforces/disallows use of ES6 object literal shorthand.
        // @這個會檢查 => { x: x } 應該改為 { x }，設為false為不強制使用shorthand。
        "object-literal-shorthand": false,

        // Checks ordering of keys in object literals.
        // @不想要做物件的排序。
        "object-literal-sort-keys": false,

        // Requires === and !== in place of == and !=.
        // Two arguments may be optionally provided:
        //      "allow-null-check" allows == and != when comparing to null.
        //      "allow-undefined-check" allows == and != when comparing to undefined.
        "triple-equals": true,

        // Enforces use of the isNaN() function to check for NaN references instead of a comparison to the NaN constant.
        "use-isnan": true,

        // Requires that variable declarations use const instead of let and var if possible.
        // If a variable is only assigned to once when it is declared, it should be declared using ‘const’
        "prefer-const": false,

        // Enforces member ordering.
        // One argument, which is an object, must be provided. It should contain an order property. The order property should have a value of one of the following strings:
        //      fields-first
        //      instance-sandwich
        //      statics-first
        // Alternatively, the value for order may be an array consisting of the following strings:
        //      public-static-field
        //      public-static-method
        //      protected-static-field
        //      protected-static-method
        //      private-static-field
        //      private-static-method
        //      public-instance-field
        //      protected-instance-field
        //      private-instance-field
        //      public-constructor
        //      protected-constructor
        //      private-constructor
        //      public-instance-method
        //      protected-instance-method
        //      private-instance-method
        // You can also omit the access modifier to refer to “public-“, “protected-“, and “private-“ all at once; for example, “static-field”.
        "member-ordering": [
            true,
            { "order": [
                "public-static-field",
                "protected-static-field",
                "private-static-field",
                "public-instance-field",
                "protected-instance-field",
                "private-instance-field",
                "public-constructor",
                "protected-constructor",
                "private-constructor",
                "public-static-method",
                "protected-static-method",
                "private-static-method",
                "public-instance-field",
                "protected-instance-field",
                "private-instance-field"
            ] }
        ],

        // Disallows use of internal modules and namespaces. This rule still allows the use of declare module ... {}
        // One argument may be optionally provided:
        //      allow-declarations allows declare namespace ... {} to describe external APIs.
        "no-namespace": [true, "allow-declarations"],

        // Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter.
        "unified-signatures": false

        // https://palantir.github.io/tslint/rules/
    },
    "rulesDirectory": []
}
